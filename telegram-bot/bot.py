#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
"""

import os
import json
import requests
import subprocess
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_REPO = os.getenv('GITHUB_REPO', 'your-username/image-gallery')
GITHUB_USERNAME = os.getenv('GITHUB_USERNAME')
GITHUB_EMAIL = os.getenv('GITHUB_EMAIL')

# –ü–∞–ø–∫–∏
IMAGES_DIR = 'public/images'
METADATA_FILE = 'public/images.json'

class ImageBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.Document.IMAGE, self.handle_document))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üñºÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Image Gallery Bot!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ –≥–∞–ª–µ—Ä–µ—é!

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ—ë –≤ –≥–∞–ª–µ—Ä–µ—é
3. –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP

–°–∞–π—Ç –≥–∞–ª–µ—Ä–µ–∏: https://your-username.github.io/image-gallery
        """
        await update.message.reply_text(help_message)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id
        
        await self.process_image(update, context, file_id, 'photo')
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∫–∞—Ä—Ç–∏–Ω–æ–∫)"""
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        if not document.mime_type.startswith('image/'):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!")
            return
        
        await self.process_image(update, context, document.file_id, 'document')
    
    async def process_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, file_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_extension = self.get_file_extension(file.file_path)
            filename = f"image_{timestamp}{file_extension}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = os.path.join(IMAGES_DIR, filename)
            os.makedirs(IMAGES_DIR, exist_ok=True)
            
            await file.download_to_drive(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            await self.update_metadata(filename, update.message.from_user.username or "Anonymous")
            
            # –ö–æ–º–º–∏—Ç–∏–º –≤ GitHub
            await self.commit_to_github(filename)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await processing_msg.edit_text(
                f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞–ª–µ—Ä–µ—é!\n\n"
                f"üìÅ –§–∞–π–ª: {filename}\n"
                f"üåê –°–∞–π—Ç: https://your-username.github.io/image-gallery"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {str(e)}")
    
    def get_file_extension(self, file_path: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if file_path.endswith('.jpg') or file_path.endswith('.jpeg'):
            return '.jpg'
        elif file_path.endswith('.png'):
            return '.png'
        elif file_path.endswith('.gif'):
            return '.gif'
        elif file_path.endswith('.webp'):
            return '.webp'
        else:
            return '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def update_metadata(self, filename: str, username: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        metadata = {
            "last_image": filename,
            "last_updated": datetime.now().isoformat(),
            "uploaded_by": username,
            "total_images": self.count_images()
        }
        
        with open(METADATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    def count_images(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        if not os.path.exists(IMAGES_DIR):
            return 0
        
        image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.webp')
        count = 0
        for file in os.listdir(IMAGES_DIR):
            if file.lower().endswith(image_extensions):
                count += 1
        return count
    
    async def commit_to_github(self, filename: str):
        """–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
            subprocess.run(['git', 'config', 'user.name', GITHUB_USERNAME], check=True)
            subprocess.run(['git', 'config', 'user.email', GITHUB_EMAIL], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            subprocess.run(['git', 'add', '.'], check=True)
            
            # –ö–æ–º–º–∏—Ç–∏–º
            commit_message = f"Add new image: {filename}"
            subprocess.run(['git', 'commit', '-m', commit_message], check=True)
            
            # –ü—É—à–∏–º
            subprocess.run(['git', 'push', 'origin', 'main'], check=True)
            
        except subprocess.CalledProcessError as e:
            print(f"Git error: {e}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ GitHub")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling()

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_BOT_TOKEN', 'GITHUB_TOKEN', 'GITHUB_USERNAME', 'GITHUB_EMAIL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        exit(1)
    
    bot = ImageBot()
    bot.run()
