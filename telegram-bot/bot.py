#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
"""

import os
import json
import requests
import subprocess
import threading
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env():
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

load_env()

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Bot is running!')
        else:
            self.send_response(404)
            self.end_headers()

def start_http_server(port):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_REPO = os.getenv('GITHUB_REPO', 'your-username/image-gallery')
GITHUB_USERNAME = os.getenv('GITHUB_USERNAME')
GITHUB_EMAIL = os.getenv('GITHUB_EMAIL')

# –ü–∞–ø–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
IMAGES_DIR = '../images'
METADATA_FILE = '../images.json'

class ImageBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.Document.IMAGE, self.handle_document))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üñºÔ∏è –ü—Ä–∏–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –º–µ–º–æ–∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –Ω–∞–¥ –Ω–µ–π –ø–æ—Å–º–µ—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫ 5 (–∏–ª–∏ –±–æ–ª—å—à–µ)
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ—ë –≤ –≥–∞–ª–µ—Ä–µ—é
3. –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP

–°–∞–π—Ç –≥–∞–ª–µ—Ä–µ–∏: https://your-username.github.io/image-gallery
        """
        await update.message.reply_text(help_message)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id
        
        await self.process_image(update, context, file_id, 'photo')
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∫–∞—Ä—Ç–∏–Ω–æ–∫)"""
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        if not document.mime_type.startswith('image/'):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!")
            return
        
        await self.process_image(update, context, document.file_id, 'document')
    
    async def process_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, file_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_extension = self.get_file_extension(file.file_path)
            filename = f"image_{timestamp}{file_extension}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = os.path.join(IMAGES_DIR, filename)
            os.makedirs(IMAGES_DIR, exist_ok=True)
            
            await file.download_to_drive(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            await self.update_metadata(filename, update.message.from_user.username or "Anonymous")
            
            # –ö–æ–º–º–∏—Ç–∏–º –≤ GitHub
            await self.commit_to_github(filename)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await processing_msg.edit_text(
                f"‚úÖ –ü—Ä–µ–∫–æ–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–π –Ω–∞ —Å–∞–π—Ç–µ üåê\n"
                f"https://evgn-ivanov.github.io/image-gallery/"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {str(e)}")
    
    def get_file_extension(self, file_path: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if file_path.endswith('.jpg') or file_path.endswith('.jpeg'):
            return '.jpg'
        elif file_path.endswith('.png'):
            return '.png'
        elif file_path.endswith('.gif'):
            return '.gif'
        elif file_path.endswith('.webp'):
            return '.webp'
        else:
            return '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def update_metadata(self, filename: str, username: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        metadata = {
            "last_image": filename,
            "last_updated": datetime.now().isoformat(),
            "uploaded_by": username,
            "total_images": self.count_images()
        }
        
        with open(METADATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    def count_images(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        if not os.path.exists(IMAGES_DIR):
            return 0
        
        image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.webp')
        count = 0
        for file in os.listdir(IMAGES_DIR):
            if file.lower().endswith(image_extensions):
                count += 1
        return count
    
    async def commit_to_github(self, filename: str):
        """–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            original_cwd = os.getcwd()
            os.chdir(repo_root)
            
            try:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
                subprocess.run(['git', 'config', 'user.name', GITHUB_USERNAME], check=True)
                subprocess.run(['git', 'config', 'user.email', GITHUB_EMAIL], check=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º remote –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                try:
                    subprocess.run(['git', 'remote', 'get-url', 'origin'], check=True, capture_output=True)
                except subprocess.CalledProcessError:
                    # –î–æ–±–∞–≤–ª—è–µ–º remote –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    remote_url = f"https://{GITHUB_USERNAME}:{GITHUB_TOKEN}@github.com/{GITHUB_REPO}.git"
                    subprocess.run(['git', 'remote', 'add', 'origin', remote_url], check=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ HEAD –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                try:
                    result = subprocess.run(['git', 'branch', '--show-current'], capture_output=True, text=True, check=True)
                    current_branch = result.stdout.strip()
                    if not current_branch or current_branch == '':
                        # –ú—ã –≤ detached HEAD, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main
                        try:
                            subprocess.run(['git', 'checkout', 'main'], check=True)
                            print("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É main")
                        except subprocess.CalledProcessError:
                            subprocess.run(['git', 'checkout', '-b', 'main'], check=True)
                            print("–°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É main")
                    elif current_branch != 'main':
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main
                        subprocess.run(['git', 'checkout', 'main'], check=True)
                        print(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å {current_branch} –Ω–∞ main")
                except subprocess.CalledProcessError:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ main, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —Å–æ–∑–¥–∞–µ–º
                    try:
                        subprocess.run(['git', 'checkout', 'main'], check=True)
                        print("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É main")
                    except subprocess.CalledProcessError:
                        subprocess.run(['git', 'checkout', '-b', 'main'], check=True)
                        print("–°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É main")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                try:
                    subprocess.run(['git', 'pull', 'origin', 'main', '--rebase'], check=True)
                    print("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ pull: {e}")
                    # –ï—Å–ª–∏ pull –Ω–µ —É–¥–∞–ª—Å—è, –¥–µ–ª–∞–µ–º force push (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
                    pass
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                subprocess.run(['git', 'add', '.'], check=True)
                
                # –ö–æ–º–º–∏—Ç–∏–º
                commit_message = f"Add new image: {filename}"
                subprocess.run(['git', 'commit', '-m', commit_message], check=True)
                
                # –ü—É—à–∏–º
                try:
                    subprocess.run(['git', 'push', 'origin', 'main'], check=True)
                    print("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                except subprocess.CalledProcessError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ push: {e}")
                    # –ï—Å–ª–∏ push –Ω–µ —É–¥–∞–ª—Å—è, –¥–µ–ª–∞–µ–º force push
                    subprocess.run(['git', 'push', 'origin', 'main', '--force'], check=True)
                    print("–í—ã–ø–æ–ª–Ω–∏–ª–∏ force push")
                
            finally:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                os.chdir(original_cwd)
            
        except subprocess.CalledProcessError as e:
            print(f"Git error: {e}")
            print(f"Return code: {e.returncode}")
            print(f"Command: {e.cmd}")
            print(f"Output: {e.output}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ GitHub: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ webhook'–∏
        try:
            import requests
            webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
            response = requests.post(webhook_url, data={'drop_pending_updates': True})
            print(f"Webhook —É–¥–∞–ª–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render
        port = int(os.environ.get('PORT', 8000))
        http_thread = threading.Thread(target=start_http_server, args=(port,), daemon=True)
        http_thread.start()
        
        print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{retry_count + 1}")
                self.app.run_polling(drop_pending_updates=True, close_loop=False)
                break
            except Exception as e:
                retry_count += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
                
                if "Conflict" in str(e) and "getUpdates" in str(e):
                    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞")
                    # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
                    import time
                    time.sleep(10)
                else:
                    import time
                    time.sleep(5)
                
                if retry_count >= max_retries:
                    print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    break
                else:
                    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_BOT_TOKEN', 'GITHUB_TOKEN', 'GITHUB_USERNAME', 'GITHUB_EMAIL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        exit(1)
    
    bot = ImageBot()
    bot.run()
